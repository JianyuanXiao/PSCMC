(optload "partial.ss")
(optload "patmatch.ss")
(optload "/home/xiaojianyuan/cxx/common/scclib.ss")
(optload "../compiler/get_dep.ss")
(define output_method 'C)
(load "scmc2c_multi_pass.sc.ss")
(optload "scmc2c_multi_pass.sc.ss")
(optload "scmc2c_passes.ss")
(optload "scmc2c_passes.ss")
(optload "helperfunction.ss")
(define (dumppass thepasssym . rst)
  (define general-def-file-name (if (null? rst) "helperfunction_compile.ss" (car rst)))
  (define cplfile (if (and (pair? rst) (null? (cdr rst))) "testcpl.ss" (cadr rst)))
  (define general-sym '(not write-char))
  (define the-ori-sym (append general-sym (get-defs general-def-file-name)))
  (define theoptfile-name (symbol->string (concat thepasssym "_opt_compile.ss")))
  (define new-syms (get-dep-lambda-rec thepasssym the-ori-sym))
  (write 'newsym= current-error-port) (write new-syms current-error-port) (newline current-error-port)
  ;(newline current-error-port)
  ;(write the-ori-sym current-error-port) (newline current-error-port)
  (dump-deps (complement new-syms the-ori-sym) theoptfile-name)
  (define testcpl (macroexpand-all (cons 'begin (append (cdr (optload-core general-def-file-name)) (cdr (optload-core theoptfile-name)) (list `(,thepasssym (read_from_stdin)))))))
  (savesym testcpl)
  (system "cat testcpl.ss | ./pass1_cped > passed1.ss")
  (system (concat "mv testcpl.ss " cplfile))
  ;(loadsym passed1)
  testcpl
)

;(define a (dumppass 'fin-shell))
