(include< "stdio.h")
(include< "stdlib.h")
(include< "string.h")
(include< "math.h")
(include< "alloca.h")
;(include< "omp.h")
(include- "local_header.h")

(eval-scmc-global `(input-scmc ,(concat PREFIX 'pscmc_inc.scmc)))

(defun pscmc_get_local_len int ()
  (return IDX_OPT_MAX)
  )

(defun pscmc_mem_init int ((pscmc_env* pe) (pscmc_mem* pm) (int type) (size_t len))
  (decl-var-and-pvar int err)
  (set! pm->len len)
  (set! pm->pe pe)
  (if (== len 0)
    (set! len 1)
    )
  (declare-size_t datasize )
  (cond
    ((== type PS_INT_NUM)     (set! datasize (* len (sizeof int    ))))
    ((== type PS_LONG_NUM)    (set! datasize (* len (sizeof long   ))))
    ((== type PS_FLOAT_NUM)   (set! datasize (* len (sizeof float  ))))
    ((== type PS_DOUBLE_NUM)  (set! datasize (* len (sizeof double ))))
    ((== type PS_SHORT_NUM)   (set! datasize (* len (sizeof short  ))))
    ((== type PS_CHAR)        (set! datasize (* len (sizeof char   ))))
    (else (fprintf stderr "Error: unknown type in init_pscmc_mem: type=%d\n" type) (set! datasize len))
    )
  (set! pm->type_len (/ datasize len))
  (set! pm->h_data (malloc datasize))
  (if (> pm->len 0)
    (begin 
      (set! pm->d_cl_mem (clCreateBuffer pe->context CL_MEM_READ_WRITE datasize NULL perr))
      (ERROPT err "Failed to alloc cl memory")
      ))
  (return 0)
  )

(defun pscmc_get_env_len int ((size_t* l))
  (set! (vector-ref l 0) (sizeof pscmc_env))
  (return 0)
  )

(defun pscmc_get_h_data void* ((pscmc_mem* pm) (void** h_data))
  (if (neq? h_data NULL) (set! (vector-ref h_data 0) pm->h_data))
  (return pm->h_data)
  )


(defun pscmc_mem_destroy int ((pscmc_mem* pm))
  (free pm->h_data)
  (if (> pm->len 0) (clReleaseMemObject pm->d_cl_mem))
  (return 0)
  )
(defun pscmc_mem_sync_h2d int ((pscmc_mem* pm))

  (decl-var-and-pvar int err)
  (if (> pm->len 0) 
    (begin 
      (set! err (clEnqueueWriteBuffer pm->pe->command_queue pm->d_cl_mem CL_TRUE 0 (* pm->len pm->type_len) pm->h_data 0 NULL NULL))
      (ERROPT err "Failed to write to cl_mem")
      )
    ;(memcpy pm->d_data pm->h_data pm->type_len)
    )
  (return 0)
  )
(defun pscmc_mem_sync_d2h int ((pscmc_mem* pm))
  (decl-var-and-pvar int err)
  (if (> pm->len 0)
    (begin 
      (set! err (clEnqueueReadBuffer pm->pe->command_queue pm->d_cl_mem CL_TRUE 0 (* pm->len pm->type_len) pm->h_data 0 NULL NULL))
      (ERROPT err "Failed to read cl_mem")
      )
    ;(memcpy pm->h_data pm->d_data pm->type_len)
    )
  (return 0)
  )
(defun pscmc_flush int ((pscmc_env* pe))
  (clFlush pe->command_queue)
  )

(defun pscmc_env_init int ((pscmc_env* pe) (int dev_num) (void* fv))
  (decl-var-and-pvar int err)
  (set! err (clGetPlatformIDs 1 ("&" pe->platform_id) NULL))
  (ERROPT err "Failed to get platform id")
  (declare-cl_device_type (cdt CL_DEVICE_TYPE_GPU))
  (define-static-int n 0)
  (fprintf stderr "info: ocl init called %d\n" n)
  (incf! n)
  (set! pe->num_prog 0)

  (set! err (clGetDeviceIDs pe->platform_id cdt 0 NULL ("&" pe->num_dev)))
  ;(cond ((== err CL_INVALID_PLATFORM) (ERROPT err "Invalid platform")) ((== err CL_INVALID_DEVICE_TYPE) (ERROPT err "Invalid device type")) ((== err CL_INVALID_VALUE) (ERROPT err "Invalid input value")) ((== err CL_DEVICE_NOT_FOUND) (ERROPT err "Device not found")) (else 0))
  ;(ERROPT err "Failed to get num_dev")
  (if (or (== err CL_DEVICE_NOT_FOUND) (== pe->num_dev 0))
    (begin 
      (set! cdt CL_DEVICE_TYPE_CPU) 
      (clGetDeviceIDs pe->platform_id cdt 0 NULL ("&" pe->num_dev))
      )
    )
  (declare-cl_device_id* (device_id (alloca (* (sizeof cl_device_id) pe->num_dev))))
  (clGetDeviceIDs pe->platform_id cdt pe->num_dev device_id NULL)
  (if (< dev_num pe->num_dev) (set! pe->device_id (vector-ref device_id dev_num)) (fprintf stderr "Error: invalid dev_num %d\n" dev_num))
  (set! pe->context (clCreateContext 0 1 ("&" pe->device_id) NULL NULL perr))
  (ERROPT err "Failed to create a compute context")
  (set! pe->command_queue (clCreateCommandQueue pe->context pe->device_id 0 perr))
  (ERROPT err "Failed to create a command commands")
  (return 0)
  )
(defun pscmc_mem_get_num size_t ((pscmc_mem* pm))
  (return pm->len)
  )

