(include< "stdio.h")
(include< "stdlib.h")
(include< "string.h")
(include< "math.h")
(include< "athread.h")
;(include< "omp.h")
(include- "local_header.h")

(eval-scmc-global `(input-scmc ,(concat PREFIX 'pscmc_inc.scmc)))
(defun pscmc_mem_init int ((pscmc_env* pe) (pscmc_mem* pm) (int type) (size_t len))
  (set! pm->len len)
  (if (== len 0)
    (set! len 1)
    )
  (declare-size_t datasize )
  (cond
    ((== type PS_INT_NUM)     (set! datasize (* len (sizeof int    ))))
    ((== type PS_LONG_NUM)    (set! datasize (* len (sizeof long   ))))
    ((== type PS_FLOAT_NUM)   (set! datasize (* len (sizeof float  ))))
    ((== type PS_DOUBLE_NUM)  (set! datasize (* len (sizeof double ))))
    ((== type PS_SHORT_NUM)   (set! datasize (* len (sizeof short ))))
    ((== type PS_CHAR)        (set! datasize (* len (sizeof char ))))
    (else (fprintf stderr "Error: unknown type in init_pscmc_mem: type=%d\n" type))
    )
  (set! pm->d_data (malloc datasize))
  (set! pm->h_data pm->d_data)
  (return 0)
  )
(defun pscmc_get_local_len int ()
  (return 1)
  )
(defun pscmc_get_env_len int ((size_t* l))
  (define-static-int if_athread_is_inited 0)
  (set! (vector-ref l 0) (sizeof pscmc_env))
  (if (not if_athread_is_inited)
    (begin
      (athread_init)
      (set! if_athread_is_inited 1)
      )
    )
  (return 0)
  )

(defun pscmc_get_h_data void* ((pscmc_mem* pm) (void** h_data))
  (if (neq? h_data NULL) (set! (vector-ref h_data 0) pm->h_data))
  (return pm->h_data)
  )

(defun pscmc_mem_destroy int ((pscmc_mem* pm))
  (free pm->d_data)
  (return 0)
  )
(defun pscmc_mem_sync_d2h int ((pscmc_mem* pm))
  (return 0)
  )
(defun pscmc_mem_sync_h2d int ((pscmc_mem* pm))
  (return 0)
  )
(defun pscmc_env_init int ((pscmc_env* pe) (int dev_num) (void* fv))
  (set! pe->num_threads 64)
  (return 0)
  )
(defun pscmc_flush int ((pscmc_env* pe))
  (return 0)
  )

(defun pscmc_mem_get_num size_t ((pscmc_mem* pm))
  (return pm->len)
  )

