(include< "stdio.h")
(include< "stdlib.h")
(include< "string.h")
(include< "math.h")
(include< "alloca.h")
;(include< "omp.h")
(include- "local_header.h")
(include< "CL/sycl.hpp")
(pure-text "\nusing namespace cl::sycl;\n")

(pure-text "\nextern \"C\" {\n")

(eval-scmc-global `(input-scmc ,(concat PREFIX 'pscmc_inc.scmc)))

;(include-  (eval-scmc-global (concat PREFIX "pscmc_inc.h")) )

(defun pscmc_get_local_len int ()
  (return IDX_OPT_MAX)
  )
(defun pscmc_get_h_data void* ((pscmc_mem* pm) (void** h_data))
  (if (neq? h_data NULL) (set! (vector-ref h_data 0) pm->h_data))
  (return pm->h_data)
  )
(defun pscmc_get_env_len int ((size_t* l))
  (set! (vector-ref l 0) (sizeof pscmc_env))
  (return 0)
  )
(defun pscmc_flush int ((pscmc_env* pe))
  ;(cudaDeviceSynchronize)
  (define-auto the_queue (type-convert queue* pe->sycl_queue))
  (the_queue->wait)
  (return 0)
  )



(defun pscmc_mem_init int ((pscmc_env* pe) (pscmc_mem* pm) (int type) (size_t len))
  ;(cudaSetDevice (structp-ref pe device_id))
  (decl-var-and-pvar int err)
  (set! pm->len len)
  (set! pm->pe pe)
  (if (== len 0) (set! len 1))
  (declare-size_t datasize )
  (cond
    ((== type PS_INT_NUM)     (set! datasize (* len (sizeof int    ))))
    ((== type PS_LONG_NUM)    (set! datasize (* len (sizeof long   ))))
    ((== type PS_FLOAT_NUM)   (set! datasize (* len (sizeof float  ))))
    ((== type PS_DOUBLE_NUM)  (set! datasize (* len (sizeof double ))))
    ((== type PS_SHORT_NUM)   (set! datasize (* len (sizeof short  ))))
    ((== type PS_CHAR)        (set! datasize (* len (sizeof char   ))))
    (else (fprintf stderr "Error: unknown type in init_pscmc_mem: type=%d\n" type) (set! datasize len))
    )
  (set! pm->type_len (/ datasize len))
  (set! pm->h_data (type-convert char* (malloc datasize)))
  ;(cudaMallocHost ("&" pm->h_data) datasize)
  (if (> pm->len 0)
    (begin 
      (define-auto the_queue (type-convert queue* pe->sycl_queue))
      (define-auto dev (the_queue->get_device))
      (define-auto ctx (the_queue->get_context))
      (set! pm->d_data (malloc_device datasize dev ctx))
      ;(cudaMalloc ("&" pm->d_data) datasize)
      ;(set! err (cudaGetLastError))
      ;(ERROPT err "Failed to alloc cuda memory")
      ))
  (return 0)
  )
(defun pscmc_mem_destroy int ((pscmc_mem* pm))
  ;(cudaSetDevice (structp-ref pm->pe device_id))

  (define-auto the_queue (type-convert queue* pm->pe->sycl_queue))
  (define-auto ctx (the_queue->get_context))
  (free pm->h_data)
  ;(cudaFreeHost pm->h_data)
  (if (> pm->len 0) (free pm->d_data ctx))
  (return 0)
  )
(defun pscmc_mem_sync_h2d int ((pscmc_mem* pm))

  ;(cudaSetDevice (structp-ref pm->pe device_id))
  ;(decl-var-and-pvar int err)
  (if (> pm->len 0) 
    (begin 
      ;(set! err (clEnqueueWriteBuffer pm->pe->command_queue pm->d_cl_mem CL_TRUE 0 (* pm->len pm->type_len) pm->h_data 0 NULL NULL))
      ;(cudaMemcpy pm->d_data pm->h_data (* pm->len pm->type_len) cudaMemcpyHostToDevice)
      (define-auto the_queue (type-convert queue* pm->pe->sycl_queue))
      (pure-text "the_queue->submit([&](handler&h){h.memcpy(pm->d_data,pm->h_data, pm->len*pm->type_len);});")

      ;(set! err (cudaGetLastError))
      ;(ERROPT err "Failed to write to cuda memory")
      ))
  (return 0)
  )
(defun pscmc_mem_sync_d2h int ((pscmc_mem* pm))
  (decl-var-and-pvar int err)
  ;(cudaSetDevice (structp-ref pm->pe device_id))
  (if (> pm->len 0)
    (begin 
      (define-auto the_queue (type-convert queue* pm->pe->sycl_queue))
      (pure-text "the_queue->submit([&](handler&h){h.memcpy(pm->h_data,pm->d_data, pm->len*pm->type_len);});")
      )
    )
  (return 0)
  )
(defun pscmc_env_init int ((pscmc_env* pe) (int dev_num) (void* fv))
  ;(decl-var-and-pvar int err)
  ;(cudaSetDevice dev_num)
  (set! pe->device_id dev_num)
  (set! pe->sycl_selector (type-convert void* (pure-text "new default_selector")))
  (set! pe->sycl_queue (type-convert void* (pure-text "new queue(((default_selector*)pe->sycl_selector)[0])")))
  ;(set! err (cudaGetLastError))
  ;(ERROPT err "failed to set the device")
  (return 0)
  )
(defun pscmc_mem_get_num size_t ((pscmc_mem* pm))
  (return pm->len)
  )
(pure-text "}\n")

